{
  "address": "0x2A71693A4d88b4f6AE6697A87b3524c04B92ab38",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mothership",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LeftoverGovernanceShareUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LeftoverReferralShareUpdate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardLeftoverShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leftoverGovernanceShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "leftoverGovernanceShareVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leftoverReferralShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "leftoverReferralShareVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "govShare",
          "type": "uint256"
        }
      ],
      "name": "leftoverShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mothership",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "notifyStakeChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBalances",
          "type": "uint256[]"
        }
      ],
      "name": "notifyStakesChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "govShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualLeftoverGovernanceShare",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualLeftoverReferralShare",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb8cf67008b270fd3913fc5bdb3748e7f76662ac31a1b35193f1b6470e3f05a4",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x2A71693A4d88b4f6AE6697A87b3524c04B92ab38",
    "transactionIndex": 57,
    "gasUsed": "1179319",
    "logsBloom": "0x
    "blockHash": "0x523f97ec50de54edab0cfc95b1b2029aa86d91334755aa0690916eabeffcd869",
    "transactionHash": "0xcb8cf67008b270fd3913fc5bdb3748e7f76662ac31a1b35193f1b6470e3f05a4",
    "logs": [],
    "blockNumber": 5553878,
    "cumulativeGasUsed": "8724760",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x73F0a6927A3c04E679074e70DFb9105F453e799D"
  ],
  "solcInputHash": "ef6f5ce9103a501e8918e5bcb055de90",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mothership\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LeftoverGovernanceShareUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LeftoverReferralShareUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardLeftoverShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leftoverGovernanceShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"leftoverGovernanceShareVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leftoverReferralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"leftoverReferralShareVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"govShare\",\"type\":\"uint256\"}],\"name\":\"leftoverShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mothership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"notifyStakeChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBalances\",\"type\":\"uint256[]\"}],\"name\":\"notifyStakesChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"govShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualLeftoverGovernanceShare\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualLeftoverReferralShare\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/ExchangeGovernance.sol\":\"ExchangeGovernance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IGovernanceModule {\\n    function notifyStakeChanged(address account, uint256 newBalance) external;\\n    function notifyStakesChanged(address[] calldata accounts, uint256[] calldata newBalances) external;\\n}\\n\",\"keccak256\":\"0x4d536ea796fbb6f9a0527690d38bb3c125ea604b72496e91c9bc0c14b152aa8f\",\"license\":\"MIT\"},\"contracts/libraries/ExchangeConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary ExchangeConstants {\\n    uint256 internal constant _LEFTOVER_TOTAL_SHARE = 1e18;          // 100%\\n    uint256 internal constant _DEFAULT_LEFTOVER_GOV_SHARE = 0.8e18;  //  80%\\n    uint256 internal constant _DEFAULT_LEFTOVER_REF_SHARE = 0.2e18;  //  20%\\n}\\n\",\"keccak256\":\"0xf597de3de4d8376029468c419eea7e243266252b1cac8b3d3a773f788031bb60\",\"license\":\"MIT\"},\"contracts/libraries/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./VirtualVote.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary LiquidVoting {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using Vote for Vote.Data;\\n    using VirtualVote for VirtualVote.Data;\\n\\n    struct Data {\\n        VirtualVote.Data data;\\n        uint256 _weightedSum;\\n        uint256 _defaultVotes;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 totalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldDefaultVotes = self._defaultVotes;\\n        uint256 newDefaultVotes = oldDefaultVotes;\\n\\n        if (oldVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.sub(oldBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n        }\\n\\n        if (newVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.add(newBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newDefaultVotes != oldDefaultVotes) {\\n            self._defaultVotes = newDefaultVotes;\\n        }\\n\\n        {\\n            uint256 newResult = newTotalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVotes.mul(defaultVote)).div(newTotalSupply);\\n            VirtualVote.Data memory data = self.data;\\n\\n            if (newResult != data.result) {\\n                VirtualVote.Data storage sdata = self.data;\\n                (sdata.oldResult, sdata.result, sdata.time) = (\\n                    data.current().toUint104(),\\n                    newResult.toUint104(),\\n                    block.timestamp.toUint48()\\n                );\\n            }\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x0300c61b4bba9a58097ec0a843d04b42260f705dbc68bf3bbcc9e9011ffdfd7a\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary SafeCast {\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n}\\n\",\"keccak256\":\"0x6f5e3e3d0bc762c2defe32c7bc62309cd7e60776bb5dc0d059a1bcf0874b4c51\",\"license\":\"MIT\"},\"contracts/libraries/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary VirtualVote {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\n\\n    struct Data {\\n        uint104 oldResult;\\n        uint104 result;\\n        uint48 time;\\n    }\\n\\n    function current(VirtualVote.Data memory self) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.oldResult).mul(timeRemain).add(\\n            uint256(self.result).mul(timePassed)\\n        ).div(_VOTE_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0xd62c910eb9b206eb6c2230be6c964824693fbe52436e53c3e69f02a84aa7c63d\",\"license\":\"MIT\"},\"contracts/libraries/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nlibrary Vote {\\n    struct Data {\\n        uint256 value;\\n    }\\n\\n    function eq(Vote.Data memory self, Vote.Data memory vote) internal pure returns(bool) {\\n        return self.value == vote.value;\\n    }\\n\\n    function init() internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: 0\\n        });\\n    }\\n\\n    function init(uint256 vote) internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: vote + 1\\n        });\\n    }\\n\\n    function isDefault(Data memory self) internal pure returns(bool) {\\n        return self.value == 0;\\n    }\\n\\n    function get(Data memory self, uint256 defaultVote) internal pure returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVote;\\n    }\\n\\n    function get(Data memory self, function() external view returns(uint256) defaultVoteFn) internal view returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVoteFn();\\n    }\\n}\\n\",\"keccak256\":\"0xa31a88aebf9a52ea8c02e611cd798631e7296b78e9ecdf37d2b0c7eb2badb252\",\"license\":\"MIT\"},\"contracts/modules/BaseGovernanceModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/IGovernanceModule.sol\\\";\\n\\n\\nabstract contract BaseGovernanceModule is IGovernanceModule {\\n    address public immutable mothership;\\n\\n    modifier onlyMothership {\\n        require(msg.sender == mothership, \\\"Access restricted to mothership\\\");\\n\\n        _;\\n    }\\n\\n    constructor(address _mothership) public {\\n        mothership = _mothership;\\n    }\\n\\n    function notifyStakesChanged(address[] calldata accounts, uint256[] calldata newBalances) external override onlyMothership {\\n        require(accounts.length == newBalances.length, \\\"Arrays length should be equal\\\");\\n\\n        for(uint256 i = 0; i < accounts.length; ++i) {\\n            _notifyStakeChanged(accounts[i], newBalances[i]);\\n        }\\n    }\\n\\n    function notifyStakeChanged(address account, uint256 newBalance) external override onlyMothership {\\n        _notifyStakeChanged(account, newBalance);\\n    }\\n\\n    function _notifyStakeChanged(address account, uint256 newBalance) internal virtual;\\n}\\n\",\"keccak256\":\"0x585f484d08c1a49536780efb1b25d8bd3a3af325fb1cd40d0e76f63a0095f10d\",\"license\":\"MIT\"},\"contracts/modules/ExchangeGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../libraries/ExchangeConstants.sol\\\";\\nimport \\\"../libraries/LiquidVoting.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\nimport \\\"../utils/BalanceAccounting.sol\\\";\\nimport \\\"./BaseGovernanceModule.sol\\\";\\n\\n\\ncontract ExchangeGovernance is BaseGovernanceModule, BalanceAccounting {\\n    using Vote for Vote.Data;\\n    using LiquidVoting for LiquidVoting.Data;\\n    using VirtualVote for VirtualVote.Data;\\n    using SafeCast for uint256;\\n\\n    event LeftoverGovernanceShareUpdate(address indexed user, uint256 vote, bool isDefault, uint256 amount);\\n    event LeftoverReferralShareUpdate(address indexed user, uint256 vote, bool isDefault, uint256 amount);\\n\\n    LiquidVoting.Data private _leftoverGovernanceShare;\\n\\n    constructor(address _mothership) public BaseGovernanceModule(_mothership) {\\n        _leftoverGovernanceShare.data.result = ExchangeConstants._DEFAULT_LEFTOVER_GOV_SHARE.toUint104();\\n    }\\n\\n    function parameters() external view returns(uint256 govShare, uint256 refShare) {\\n        govShare = _leftoverGovernanceShare.data.current();\\n        refShare = ExchangeConstants._LEFTOVER_TOTAL_SHARE.sub(govShare);\\n    }\\n\\n    function leftoverGovernanceShare() external view returns(uint256) {\\n        return _leftoverGovernanceShare.data.current();\\n    }\\n\\n    function leftoverGovernanceShareVotes(address user) external view returns(uint256) {\\n        return _leftoverGovernanceShare.votes[user].get(ExchangeConstants._DEFAULT_LEFTOVER_GOV_SHARE);\\n    }\\n\\n    function virtualLeftoverGovernanceShare() external view returns(uint104, uint104, uint48) {\\n        return (_leftoverGovernanceShare.data.oldResult, _leftoverGovernanceShare.data.result, _leftoverGovernanceShare.data.time);\\n    }\\n\\n    //\\n\\n    function leftoverReferralShare() external view returns(uint256) {\\n        return ExchangeConstants._LEFTOVER_TOTAL_SHARE.sub(_leftoverGovernanceShare.data.current());\\n    }\\n\\n    function leftoverReferralShareVotes(address user) external view returns(uint256) {\\n        return ExchangeConstants._LEFTOVER_TOTAL_SHARE.sub(_leftoverGovernanceShare.votes[user].get(ExchangeConstants._DEFAULT_LEFTOVER_GOV_SHARE));\\n    }\\n\\n    function virtualLeftoverReferralShare() external view returns(uint104, uint104, uint48) {\\n        return (\\n            ExchangeConstants._LEFTOVER_TOTAL_SHARE.sub(_leftoverGovernanceShare.data.oldResult).toUint104(),\\n            ExchangeConstants._LEFTOVER_TOTAL_SHARE.sub(_leftoverGovernanceShare.data.result).toUint104(),\\n            _leftoverGovernanceShare.data.time\\n        );\\n    }\\n\\n    ///\\n\\n    function leftoverShareVote(uint256 govShare) external {\\n        uint256 refShare = ExchangeConstants._LEFTOVER_TOTAL_SHARE.sub(govShare, \\\"Governance share is too high\\\");\\n\\n        uint256 balance = balanceOf(msg.sender);\\n        uint256 supply = totalSupply();\\n\\n        _leftoverGovernanceShare.updateVote(\\n            msg.sender,\\n            _leftoverGovernanceShare.votes[msg.sender],\\n            Vote.init(govShare),\\n            balance,\\n            supply,\\n            ExchangeConstants._DEFAULT_LEFTOVER_GOV_SHARE,\\n            _emitLeftoverGovernanceShareVoteUpdate\\n        );\\n\\n        _emitLeftoverReferralShareVoteUpdate(msg.sender, refShare, false, balance);\\n    }\\n\\n    function discardLeftoverShareVote() external {\\n        uint256 balance = balanceOf(msg.sender);\\n        uint256 supply = totalSupply();\\n\\n        _leftoverGovernanceShare.updateVote(\\n           msg.sender,\\n           _leftoverGovernanceShare.votes[msg.sender],\\n           Vote.init(),\\n           balance,\\n           supply,\\n           ExchangeConstants._DEFAULT_LEFTOVER_GOV_SHARE,\\n           _emitLeftoverGovernanceShareVoteUpdate\\n        );\\n\\n        _emitLeftoverReferralShareVoteUpdate(msg.sender, ExchangeConstants._DEFAULT_LEFTOVER_REF_SHARE, true, balance);\\n    }\\n\\n    function _notifyStakeChanged(address account, uint256 newBalance) internal override {\\n        uint256 balance = _set(account, newBalance);\\n        if (newBalance == balance) {\\n            return;\\n        }\\n\\n        Vote.Data memory govShareVote = _leftoverGovernanceShare.votes[account];\\n        uint256 refShare = ExchangeConstants._LEFTOVER_TOTAL_SHARE.sub(govShareVote.get(ExchangeConstants._DEFAULT_LEFTOVER_GOV_SHARE));\\n        uint256 supply = totalSupply();\\n\\n        _leftoverGovernanceShare.updateBalance(\\n            account,\\n            govShareVote,\\n            balance,\\n            newBalance,\\n            supply,\\n            ExchangeConstants._DEFAULT_LEFTOVER_GOV_SHARE,\\n            _emitLeftoverGovernanceShareVoteUpdate\\n        );\\n\\n        _emitLeftoverReferralShareVoteUpdate(\\n            account,\\n            refShare,\\n            govShareVote.isDefault(),\\n            newBalance\\n        );\\n    }\\n\\n    function _emitLeftoverGovernanceShareVoteUpdate(address user, uint256 newDefaultShare, bool isDefault, uint256 balance) private {\\n        emit LeftoverGovernanceShareUpdate(user, newDefaultShare, isDefault, balance);\\n    }\\n\\n    function _emitLeftoverReferralShareVoteUpdate(address user, uint256 newDefaultShare, bool isDefault, uint256 balance) private {\\n        emit LeftoverReferralShareUpdate(user, newDefaultShare, isDefault, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x5ebe0e55c71b51f401a7900ea29788c8f80c56c4110c29b70d68774318b948d6\",\"license\":\"MIT\"},\"contracts/utils/BalanceAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract BalanceAccounting {\\n    using SafeMath for uint256;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _balances[account] = _balances[account].sub(amount, \\\"Burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n    }\\n\\n    function _set(address account, uint256 amount) internal virtual returns(uint256 oldAmount) {\\n        oldAmount = _balances[account];\\n        if (oldAmount != amount) {\\n            _balances[account] = amount;\\n            _totalSupply = _totalSupply.add(amount).sub(oldAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ae3cf0992b5e6d9eea9f5b1d1feec7d87ea2caecc493acf5dcedb3fe5034d48\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516115293803806115298339818101604052602081101561003357600080fd5b5051606081901b6001600160601b031916608052610063670b1a2bc2ec500000610094602090811b610a1217901c565b600280546001600160681b0392909216600160681b02600160681b600160d01b0319909216919091179055506100f2565b6000600160681b82106100ee576040805162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e2031303420626974730000604482015290519081900360640190fd5b5090565b60805160601c61141061011960003980610430528061057d528061081b52506114106000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c57806394f4b1621161006657806394f4b16214610269578063ad33334814610271578063e44f53d314610333578063fa3f88ae14610366576100ea565b806370a08231146101f85780637bcf84c01461022b5780638903573014610248576100ea565b80632fce8dea116100c85780632fce8dea1461018457806331f866af1461018c5780634187b7d6146101bf5780634aded6ce146101f0576100ea565b806310d97a18146100ef57806318160ddd1461012f57806327a2743314610149575b600080fd5b6100f761036e565b604080516cffffffffffffffffffffffffff948516815292909316602083015265ffffffffffff168183015290519081900360600190f35b610137610412565b60408051918252519081900360200190f35b6101826004803603604081101561015f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610418565b005b6100f76104ca565b610137600480360360208110156101a257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661051d565b6101c761057b565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61013761059f565b6101376004803603602081101561020e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610618565b6101826004803603602081101561024157600080fd5b5035610640565b610250610707565b6040805192835260208301919091528051918290030190f35b610137610793565b6101826004803603604081101561028757600080fd5b8101906020810181356401000000008111156102a257600080fd5b8201836020820111156102b457600080fd5b803590602001918460208302840111640100000000831117156102d657600080fd5b9193909290916020810190356401000000008111156102f457600080fd5b82018360208201111561030657600080fd5b8035906020019184602083028401116401000000008311171561032857600080fd5b509092509050610803565b6101376004803603602081101561034957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610973565b6101826109b8565b600254600090819081906103a39061039e90670de0b6b3a7640000906cffffffffffffffffffffffffff16610a94565b610a12565b6002546103dd9061039e90670de0b6b3a7640000906d010000000000000000000000000090046cffffffffffffffffffffffffff16610a94565b60025491959094507a01000000000000000000000000000000000000000000000000000090910465ffffffffffff1692509050565b60005490565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146104bc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f416363657373207265737472696374656420746f206d6f746865727368697000604482015290519081900360640190fd5b6104c68282610b0b565b5050565b6002546cffffffffffffffffffffffffff808216926d01000000000000000000000000008304909116917a010000000000000000000000000000000000000000000000000000900465ffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260056020908152604080832081519283019091525481526105759061056690670b1a2bc2ec500000610bbe565b670de0b6b3a764000090610a94565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080516060810182526002546cffffffffffffffffffffffffff80821683526d010000000000000000000000000082041660208301527a010000000000000000000000000000000000000000000000000000900465ffffffffffff16918101919091526000906106139061056690610bf8565b905090565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b6000610694826040518060400160405280601c81526020017f476f7665726e616e636520736861726520697320746f6f206869676800000000815250670de0b6b3a7640000610c989092919063ffffffff16565b905060006106a133610618565b905060006106ad610412565b336000818152600560209081526040918290208251918201909252905481529192506106f4916106dc87610d49565b60029291908686670b1a2bc2ec500000610d68610dc8565b6107013384600085610de3565b50505050565b604080516060810182526002546cffffffffffffffffffffffffff80821683526d010000000000000000000000000082041660208301527a010000000000000000000000000000000000000000000000000000900465ffffffffffff1691810191909152600090819061077990610bf8565b915061078d670de0b6b3a764000083610a94565b90509091565b604080516060810182526002546cffffffffffffffffffffffffff80821683526d010000000000000000000000000082041660208301527a010000000000000000000000000000000000000000000000000000900465ffffffffffff169181019190915260009061061390610bf8565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f416363657373207265737472696374656420746f206d6f746865727368697000604482015290519081900360640190fd5b82811461091557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f417272617973206c656e6774682073686f756c6420626520657175616c000000604482015290519081900360640190fd5b60005b8381101561096c5761096485858381811061092f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1684848481811061095857fe5b90506020020135610b0b565b600101610918565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560209081526040808320815192830190915254815261057590670b1a2bc2ec500000610bbe565b60006109c333610618565b905060006109cf610412565b336000818152600560209081526040918290208251918201909252905481529192506109fd916106dc610e43565b6104c6336702c68af0bb140000600185610de3565b60006d01000000000000000000000000008210610a9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e2031303420626974730000604482015290519081900360640190fd5b5090565b600082821115610b0557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000610b178383610e5e565b905080821415610b2757506104c6565b610b2f611386565b5073ffffffffffffffffffffffffffffffffffffffff83166000908152600560209081526040808320815192830190915254815290610b7961056683670b1a2bc2ec500000610bbe565b90506000610b85610412565b9050610ba260028785878986670b1a2bc2ec500000610d68610ed3565b610bb68683610bb086610ef7565b88610de3565b505050505050565b815160009015610bf2575081517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610575565b50919050565b600080610c2662015180610c21856040015165ffffffffffff1642610a9490919063ffffffff16565b610efc565b90506000610c376201518083610a94565b9050610c9062015180610c8a610c698588602001516cffffffffffffffffffffffffff16610f1490919063ffffffff16565b8751610c84906cffffffffffffffffffffffffff1686610f14565b90610f87565b90610ffb565b949350505050565b60008184841115610d41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d06578181015183820152602001610cee565b50505050905090810190601f168015610d335780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b610d51611386565b506040805160208101909152600182018152919050565b604080518481528315156020820152808201839052905173ffffffffffffffffffffffffffffffffffffffff8616917f2f2c318dd3a1bee02ade0f8f05d9c8f392f7988aa993cc619153bf068801d259919081900360600190a250505050565b610dd988888888888989898961107c565b5050505050505050565b604080518481528315156020820152808201839052905173ffffffffffffffffffffffffffffffffffffffff8616917fc81c61c2c3ce128e7b0962cbb5ffd5d975dcefcca05b54345474f37943743b7a919081900360600190a250505050565b610e4b611386565b5060408051602081019091526000815290565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020548181146105755773ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040812083905554610eca908290610ec49085610f87565b90610a94565b60005592915050565b610dd98888888715610ee55789610eed565b610eed610e43565b898989898961107c565b511590565b6000818310610f0b5781610f0d565b825b9392505050565b600082610f2357506000610575565b82820282848281610f3057fe5b0414610f0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806113ba6021913960400191505060405180910390fd5b600082820183811015610f0d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080821161106b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161107457fe5b049392505050565b600189015460028a01548190806110928b610ef7565b156110a8576110a1818a610a94565b90506110c9565b6110c66110bf6110b88d89610bbe565b8b90610f14565b8490610a94565b92505b6110d28a610ef7565b156110e8576110e18189610f87565b9050611109565b6111066110ff6110f88c89610bbe565b8a90610f14565b8490610f87565b92505b8383146111185760018d018390555b8181146111275760028d018190555b6000871561114c5761114788610c8a611140858b610f14565b8790610f87565b61114e565b865b9050611158611399565b50604080516060810182528f546cffffffffffffffffffffffffff80821683526d0100000000000000000000000000820416602083018190527a01000000000000000000000000000000000000000000000000000090910465ffffffffffff169282019290925290821461129b578e6111d361039e83610bf8565b6111dc84610a12565b6111e542611308565b835479ffffffffffffffffffffffffffffffffffffffffffffffffffff167a01000000000000000000000000000000000000000000000000000065ffffffffffff9290921691909102177fffffffffffff00000000000000000000000000ffffffffffffffffffffffffff166d01000000000000000000000000006cffffffffffffffffffffffffff92831602177fffffffffffffffffffffffffffffffffffffff000000000000000000000000001691161790555b506112a890508a8c61137f565b6112d85773ffffffffffffffffffffffffffffffffffffffff8c16600090815260038e01602052604090208a5190555b6112f98c6112e68c89610bbe565b6112ef8d610ef7565b8b8963ffffffff16565b50505050505050505050505050565b600066010000000000008210610a9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e2034382062697473000000604482015290519081900360640190fd5b5190511490565b6040518060200160405280600081525090565b60408051606081018252600080825260208201819052918101919091529056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220306ea38aaf7b4008990f89c72cdf714cb0241ca50bc8187f7a2d378ce6edb1ac64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3969,
        "contract": "contracts/modules/ExchangeGovernance.sol:ExchangeGovernance",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3973,
        "contract": "contracts/modules/ExchangeGovernance.sol:ExchangeGovernance",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3517,
        "contract": "contracts/modules/ExchangeGovernance.sol:ExchangeGovernance",
        "label": "_leftoverGovernanceShare",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Data)2554_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Data)3185_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vote.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)3185_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Data)2554_storage": {
        "encoding": "inplace",
        "label": "struct LiquidVoting.Data",
        "members": [
          {
            "astId": 2545,
            "contract": "contracts/modules/ExchangeGovernance.sol:ExchangeGovernance",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Data)3129_storage"
          },
          {
            "astId": 2547,
            "contract": "contracts/modules/ExchangeGovernance.sol:ExchangeGovernance",
            "label": "_weightedSum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2549,
            "contract": "contracts/modules/ExchangeGovernance.sol:ExchangeGovernance",
            "label": "_defaultVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2553,
            "contract": "contracts/modules/ExchangeGovernance.sol:ExchangeGovernance",
            "label": "votes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Data)3185_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Data)3129_storage": {
        "encoding": "inplace",
        "label": "struct VirtualVote.Data",
        "members": [
          {
            "astId": 3124,
            "contract": "contracts/modules/ExchangeGovernance.sol:ExchangeGovernance",
            "label": "oldResult",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 3126,
            "contract": "contracts/modules/ExchangeGovernance.sol:ExchangeGovernance",
            "label": "result",
            "offset": 13,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 3128,
            "contract": "contracts/modules/ExchangeGovernance.sol:ExchangeGovernance",
            "label": "time",
            "offset": 26,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)3185_storage": {
        "encoding": "inplace",
        "label": "struct Vote.Data",
        "members": [
          {
            "astId": 3184,
            "contract": "contracts/modules/ExchangeGovernance.sol:ExchangeGovernance",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}