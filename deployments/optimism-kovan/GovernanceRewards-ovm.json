{
  "address": "0xcE40aa51eEF43BBc250Fae9D6c19C642C3d764E5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_gift",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mothership",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gift",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mothership",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "notifyStakeChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBalances",
          "type": "uint256[]"
        }
      ],
      "name": "notifyStakesChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistribution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        }
      ],
      "name": "setRewardDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcbda568a15a2ff191d8926aa2ed1c2fdad069161f141eddd1417e6320eb91fa2",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xcE40aa51eEF43BBc250Fae9D6c19C642C3d764E5",
    "transactionIndex": 0,
    "gasUsed": "3446820",
    "logsBloom": "0x
    "blockHash": "0x6a32438a1d38ce9ed19249cf0fa018c2c74252e5a38166eba6fd2561f297346c",
    "transactionHash": "0xcbda568a15a2ff191d8926aa2ed1c2fdad069161f141eddd1417e6320eb91fa2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 101316,
        "transactionHash": "0xcbda568a15a2ff191d8926aa2ed1c2fdad069161f141eddd1417e6320eb91fa2",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x6a32438a1d38ce9ed19249cf0fa018c2c74252e5a38166eba6fd2561f297346c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 101316,
        "transactionHash": "0xcbda568a15a2ff191d8926aa2ed1c2fdad069161f141eddd1417e6320eb91fa2",
        "address": "0xcE40aa51eEF43BBc250Fae9D6c19C642C3d764E5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6a32438a1d38ce9ed19249cf0fa018c2c74252e5a38166eba6fd2561f297346c"
      }
    ],
    "blockNumber": 101316,
    "cumulativeGasUsed": "3446820",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x135C8C0393fbbb6942294192064EeD5e63A24A93",
    "0xF9D6dec8eDfF1eb0214B3A3C6E44E4F8333C7d4D"
  ],
  "solcInputHash": "a38ae5599f0a3af2e3be1bffc2abb66b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12-develop.2020.12.9+commit.9b8c5857\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_gift\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mothership\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gift\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mothership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"notifyStakeChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBalances\",\"type\":\"uint256[]\"}],\"name\":\"notifyStakesChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/GovernanceRewards.sol\":\"GovernanceRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IGovernanceModule {\\n    function notifyStakeChanged(address account, uint256 newBalance) external;\\n    function notifyStakesChanged(address[] calldata accounts, uint256[] calldata newBalances) external;\\n}\\n\",\"keccak256\":\"0x4d536ea796fbb6f9a0527690d38bb3c125ea604b72496e91c9bc0c14b152aa8f\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: operation failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6b9e2dc321ca19ffe358eb86a95b4ec82b47a5132248461c1f35dd50d232172\",\"license\":\"MIT\"},\"contracts/modules/BaseGovernanceModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/IGovernanceModule.sol\\\";\\n\\n\\nabstract contract BaseGovernanceModule is IGovernanceModule {\\n    address public immutable mothership;\\n\\n    modifier onlyMothership {\\n        require(msg.sender == mothership, \\\"Access restricted to mothership\\\");\\n\\n        _;\\n    }\\n\\n    constructor(address _mothership) public {\\n        mothership = _mothership;\\n    }\\n\\n    function notifyStakesChanged(address[] calldata accounts, uint256[] calldata newBalances) external override onlyMothership {\\n        require(accounts.length == newBalances.length, \\\"Arrays length should be equal\\\");\\n\\n        for(uint256 i = 0; i < accounts.length; ++i) {\\n            _notifyStakeChanged(accounts[i], newBalances[i]);\\n        }\\n    }\\n\\n    function notifyStakeChanged(address account, uint256 newBalance) external override onlyMothership {\\n        _notifyStakeChanged(account, newBalance);\\n    }\\n\\n    function _notifyStakeChanged(address account, uint256 newBalance) internal virtual;\\n}\\n\",\"keccak256\":\"0x585f484d08c1a49536780efb1b25d8bd3a3af325fb1cd40d0e76f63a0095f10d\",\"license\":\"MIT\"},\"contracts/modules/GovernanceRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./BaseGovernanceModule.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../utils/BaseRewards.sol\\\";\\n\\n\\ncontract GovernanceRewards is BaseGovernanceModule, BaseRewards {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(IERC20 _gift, address _mothership) public BaseGovernanceModule(_mothership) BaseRewards(_gift) {}\\n\\n    function _notifyStakeChanged(address account, uint256 newBalance) internal override updateReward(account) {\\n        _set(account, newBalance);\\n    }\\n\\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\\n        require(token != gift, \\\"Can't rescue gift\\\");\\n\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xbde0fb291ae70ec77847846d84eb2ed41ca86083b53854a901bffde1b184222a\",\"license\":\"MIT\"},\"contracts/utils/BalanceAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract BalanceAccounting {\\n    using SafeMath for uint256;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _balances[account] = _balances[account].sub(amount, \\\"Burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n    }\\n\\n    function _set(address account, uint256 amount) internal virtual returns(uint256 oldAmount) {\\n        oldAmount = _balances[account];\\n        if (oldAmount != amount) {\\n            _balances[account] = amount;\\n            _totalSupply = _totalSupply.add(amount).sub(oldAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ae3cf0992b5e6d9eea9f5b1d1feec7d87ea2caecc493acf5dcedb3fe5034d48\",\"license\":\"MIT\"},\"contracts/utils/BaseRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BalanceAccounting.sol\\\";\\n\\n\\ncontract BaseRewards is Ownable, BalanceAccounting {\\n    event RewardAdded(uint256 reward);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    uint256 public constant DURATION = 7 days;\\n\\n    address public rewardDistribution;\\n    IERC20 public immutable gift;\\n    uint256 public periodFinish;\\n    uint256 public rewardRate;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n\\n        _;\\n    }\\n\\n    modifier onlyRewardDistribution() {\\n        require(msg.sender == rewardDistribution, \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    constructor(IERC20 _gift) public {\\n        gift = _gift;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            balanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getReward() public updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            gift.transfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward) external onlyRewardDistribution updateReward(address(0)) {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(DURATION);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(DURATION);\\n        }\\n\\n        uint balance = gift.balanceOf(address(this));\\n        require(rewardRate <= balance.div(DURATION), \\\"Reward is too big\\\");\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(DURATION);\\n        emit RewardAdded(reward);\\n    }\\n\\n    function setRewardDistribution(address _rewardDistribution) external onlyOwner {\\n        rewardDistribution = _rewardDistribution;\\n    }\\n}\\n\",\"keccak256\":\"0x998f3002a6d5ef465cf86518f356a79ab229459572398f1f02dc98c57e74f510\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001c57600080620000196200011d565b50505b50604051620025ad380380620025ad833981810160405260408110156200004d576000806200004a6200011d565b50505b81019080805192919060200180516001600160601b0319606082901b16608052925083915060009050620000806200010b565b9050806000600181620000926200018a565b816001600160a01b0302191690836001600160a01b0316021790620000b6620001ec565b5050506001600160a01b03811660007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060601b6001600160601b03191660a05250620002829050565b60005a620001186200023b565b905090565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015620001575780860151828201604001526020016200013a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015620001e757600082820152602001620001ce565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020620001ce565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020620001ce565b60805160601c60a05160601c6122e8620002c5600039806107725280610a905280610e6052806112355250806107965280610fca528061138f52506122e86000f3fe608060405234801561001957600080610016611f03565b50505b50600436106101a05760003560e01c8063715018a6116100ec578063ad33334811610095578063df136d651161006f578063df136d6514610522578063ebe2b12b1461052a578063f2fde38b14610532576101a0565b8063ad33334814610411578063c8f33c9114610512578063cd3daf9d1461051a576101a0565b806380faa57d116100c657806380faa57d146103c55780638b876347146103cd5780638da5cb5b14610409576101a0565b8063715018a61461037357806378e3214f1461037b5780637b0a47ee146103bd576101a0565b806324b049051161014e5780633d18b912116101285780633d18b912146103275780634187b7d61461032f57806370a0823114610337576101a0565b806324b04905146102b757806327a27433146102bf5780633c6b16ab14610301576101a0565b8063101114cf1161017f578063101114cf1461027657806318160ddd146102a75780631be05289146102af576101a0565b80628cc262146101ae5780630700037d146101fc5780630d68b76114610238575b6000806101ab611f03565b50505b6101ea600480360360208110156101cd576000806101ca611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff1661056e565b60405190815260200160405180910390f35b6101ea6004803603602081101561021b57600080610218611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff16610610565b6102746004803603602081101561025757600080610254611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff1661062b565b005b61027e61072b565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6101ea610757565b6101ea610769565b61027e610770565b610274600480360360408110156102de576000806102db611f03565b50505b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610794565b610274600480360360208110156103205760008061031d611f03565b50505b503561086c565b610274610ce6565b61027e610fc8565b6101ea6004803603602081101561035657600080610353611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff16610fec565b610274611019565b6102746004803603604081101561039a57600080610397611f03565b50505b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611183565b6101ea611320565b6101ea61132a565b6101ea600480360360208110156103ec576000806103e9611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611347565b61027e61135f565b610274600480360360408110156104305760008061042d611f03565b50505b81019060208101813564010000000081111561045457600080610451611f03565b50505b82018360208201111561046f5760008061046c611f03565b50505b8035906020019184602083028401116401000000008311171561049a57600080610497611f03565b50505b9193909290916020810190356401000000008111156104c1576000806104be611f03565b50505b8201836020820111156104dc576000806104d9611f03565b50505b8035906020019184602083028401116401000000008311171561050757600080610504611f03565b50505b50909250905061138d565b6101ea61152b565b6101ea611535565b6101ea61159a565b6101ea6115a4565b610274600480360360208110156105515760008061054e611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff166115ae565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600960205261060a6040822061059e611f6e565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600860205261060490670de0b6b3a7640000906105fe906105ef90604090206105e1611f6e565b6105e9611535565b90611762565b6105f888610fec565b906117e1565b90611864565b906118ed565b92915050565b60096020528060005260406000209050610628611f6e565b81565b610633611966565b73ffffffffffffffffffffffffffffffffffffffff1661065161135f565b73ffffffffffffffffffffffffffffffffffffffff16146106db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906106d8611f03565b50505b8060036001816106e9611f6e565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790610725611fc9565b50505050565b60006003610737611f6e565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001610763611f6e565b90505b90565b62093a8081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165a6107d4612017565b73ffffffffffffffffffffffffffffffffffffffff161461085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f416363657373207265737472696374656420746f206d6f74686572736869700060448201526064016040518091039061085b611f03565b50505b6108688282611971565b5050565b60006003610878611f6e565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff165a6108b4612017565b73ffffffffffffffffffffffffffffffffffffffff161461093e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4163636573732064656e6965640000000000000000000000000000000000000060448201526064016040518091039061093b611f03565b50505b6000610948611535565b806007610953611fc9565b50505061095e61132a565b806006610969611fc9565b50505073ffffffffffffffffffffffffffffffffffffffff811615610a00576109918161056e565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260096020526040902081906109c0611fc9565b50505060076109cd611f6e565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040902081906109fc611fc9565b5050505b6004610a0a611f6e565b5a610a1361205d565b10610a3857610a258262093a80611864565b806005610a30611fc9565b505050610a8c565b6000610a505a610a4661205d565b60046105e9611f6e565b90506000610a686005610a61611f6e565b83906117e1565b9050610a7b62093a806105fe86846118ed565b806005610a86611fc9565b50505050505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015610b2057600082820152602001610b09565b5050506040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016020604051808303818680610b826120a3565b158015610b9757600080610b94611f03565b50505b505a610ba16120ef565b5050505050158015610bc0573d6000803e3d6000610bbd611f03565b50505b505050506040513d6020811015610bdf57600080610bdc611f03565b50505b8101908080519350610bfa925083915062093a809050611864565b6005610c04611f6e565b1115610c79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f52657761726420697320746f6f20626967000000000000000000000000000000604482015260640160405180910390610c76611f03565b50505b5a610c8261205d565b806006610c8d611fc9565b505050610ca062093a805a61060461205d565b806004610cab611fc9565b5050507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d8360405190815260200160405180910390a1505050565b5a610cef612017565b610cf7611535565b806007610d02611fc9565b505050610d0d61132a565b806006610d18611fc9565b50505073ffffffffffffffffffffffffffffffffffffffff811615610daf57610d408161056e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526009602052604090208190610d6f611fc9565b5050506007610d7c611f6e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602052604090208190610dab611fc9565b5050505b6000600960005a610dbe612017565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610e00611f6e565b90508015610868576000600960005a610e17612017565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190610e5b611fc9565b5050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb5a610ea3612017565b836040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482015260440160206040518083038160008780610f0a6120a3565b158015610f1f57600080610f1c611f03565b50505b505a610f296121da565b505050505050158015610f49573d6000803e3d6000610f46611f03565b50505b505050506040513d6020811015610f6857600080610f65611f03565b50505b810190808051505050505a610f7b612017565b73ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04868260405190815260200160405180910390a25050565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812061060a611f6e565b611021611966565b73ffffffffffffffffffffffffffffffffffffffff1661103f61135f565b73ffffffffffffffffffffffffffffffffffffffff16146110c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906110c6611f03565b50505b600080806110d5611f6e565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600080600181611142611f6e565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179061117e611fc9565b505050565b61118b611966565b73ffffffffffffffffffffffffffffffffffffffff166111a961135f565b73ffffffffffffffffffffffffffffffffffffffff1614611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611230611f03565b50505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f43616e27742072657363756520676966740000000000000000000000000000006044820152606401604051809103906112f3611f03565b50505b6108685a611302612017565b73ffffffffffffffffffffffffffffffffffffffff84169083611a3c565b6005610628611f6e565b60006107635a61133861205d565b6004611342611f6e565b611ae8565b60086020528060005260406000209050610628611f6e565b6000808061136b611f6e565b906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165a6113cd612017565b73ffffffffffffffffffffffffffffffffffffffff1614611457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f416363657373207265737472696374656420746f206d6f746865727368697000604482015260640160405180910390611454611f03565b50505b8281146114cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f417272617973206c656e6774682073686f756c6420626520657175616c0000006044820152606401604051809103906114ca611f03565b50505b60005b838110156115245761151c8585838181106114e757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1684848481811061151057fe5b90506020020135611971565b6001016114d0565b5050505050565b6006610628611f6e565b600061153f610757565b61155457600761154d611f6e565b9050610766565b610763611590611562610757565b6105fe670de0b6b3a76400006105f8600561157b611f6e565b6105f86006611588611f6e565b6105e961132a565b6007610604611f6e565b6007610628611f6e565b6004610628611f6e565b6115b6611966565b73ffffffffffffffffffffffffffffffffffffffff166115d461135f565b73ffffffffffffffffffffffffffffffffffffffff161461165e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016040518091039061165b611f03565b50505b73ffffffffffffffffffffffffffffffffffffffff81166116d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806122a160269139604001915050604051809103906116d0611f03565b50505b8073ffffffffffffffffffffffffffffffffffffffff166000806116f5611f6e565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a38060006001816106e9611f6e565b6000828211156117db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401604051809103906117d8611f03565b50505b50900390565b6000826117f05750600061060a565b828202828482816117fd57fe5b041461185d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806122c7602191396040019150506040518091039061185a611f03565b50505b9392505050565b60008082116118dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401604051809103906118d9611f03565b50505b8183816118e557fe5b049392505050565b60008282018381101561185d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016040518091039061185a611f03565b60005a610763612017565b8161197a611535565b806007611985611fc9565b50505061199061132a565b80600661199b611fc9565b50505073ffffffffffffffffffffffffffffffffffffffff811615611a32576119c38161056e565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260096020526040902081906119f2611fc9565b50505060076119ff611f6e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602052604090208190611a2e611fc9565b5050505b6107258383611afe565b61117e837fa9059cbb00000000000000000000000000000000000000000000000000000000848460405173ffffffffffffffffffffffffffffffffffffffff90921660248301526044820152606401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169091179052611b8e565b6000818310611af7578161185d565b5090919050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260408120611b2b611f6e565b905081811461060a5773ffffffffffffffffffffffffffffffffffffffff8316600090815260026020528290604090208190611b65611fc9565b505050611b7a816105e9846001610604611f6e565b806001611b85611fc9565b50505092915050565b6060611be6826040516040808201905260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649082015273ffffffffffffffffffffffffffffffffffffffff86169190611c8a565b905060008151111561117e576020810181516020811015611c0f57600080611c0c611f03565b50505b810190808051925061117e915050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5361666545524332303a206f7065726174696f6e206661696c65640000000000604482015260640160405180910390611524611f03565b6060611c9584611e1d565b611d08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640160405180910390611d05611f03565b50505b600060608573ffffffffffffffffffffffffffffffffffffffff16856040518082805190602001908083835b60208310611d7157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611d34565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865a611dab6121da565b5050505050509150503d8060008114611dfe576040513d603f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681016040523d815291503d6000602084013e611e03565b606091505b5091509150611e13828286611e32565b9695505050505050565b60008082611e296120a3565b15159392505050565b60608315611e4157508161185d565b600083511115611e625782518084602001611e5a611f03565b50505061185d565b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ec6578082015183820152602001611eae565b50505050905090810190601f168015611ef35780820380516001836020036101000a031916815260200191505b50925050506040518091039061185a5b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015611f3b578086015182820160400152602001611f20565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561117e57600082820152602001611fb2565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020611fb2565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611fb2565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611fb2565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611fb2565b638540661f598160e01b8152612120565b808083111561060a575090919050565b808083101561060a575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015612158578088015182820152602001612140565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596121ad8d3d612110565b8c016121b98187612100565b5b828110156121ce57600081526020016121ba565b50929c50505050505050565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b8981101561221e578089015182820152602001612206565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596122738e3d612110565b8d0161227f8187612100565b5b828110156122945760008152602001612280565b50929d5050505050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "deployedBytecode": "0x608060405234801561001957600080610016611f03565b50505b50600436106101a05760003560e01c8063715018a6116100ec578063ad33334811610095578063df136d651161006f578063df136d6514610522578063ebe2b12b1461052a578063f2fde38b14610532576101a0565b8063ad33334814610411578063c8f33c9114610512578063cd3daf9d1461051a576101a0565b806380faa57d116100c657806380faa57d146103c55780638b876347146103cd5780638da5cb5b14610409576101a0565b8063715018a61461037357806378e3214f1461037b5780637b0a47ee146103bd576101a0565b806324b049051161014e5780633d18b912116101285780633d18b912146103275780634187b7d61461032f57806370a0823114610337576101a0565b806324b04905146102b757806327a27433146102bf5780633c6b16ab14610301576101a0565b8063101114cf1161017f578063101114cf1461027657806318160ddd146102a75780631be05289146102af576101a0565b80628cc262146101ae5780630700037d146101fc5780630d68b76114610238575b6000806101ab611f03565b50505b6101ea600480360360208110156101cd576000806101ca611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff1661056e565b60405190815260200160405180910390f35b6101ea6004803603602081101561021b57600080610218611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff16610610565b6102746004803603602081101561025757600080610254611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff1661062b565b005b61027e61072b565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6101ea610757565b6101ea610769565b61027e610770565b610274600480360360408110156102de576000806102db611f03565b50505b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610794565b610274600480360360208110156103205760008061031d611f03565b50505b503561086c565b610274610ce6565b61027e610fc8565b6101ea6004803603602081101561035657600080610353611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff16610fec565b610274611019565b6102746004803603604081101561039a57600080610397611f03565b50505b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611183565b6101ea611320565b6101ea61132a565b6101ea600480360360208110156103ec576000806103e9611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611347565b61027e61135f565b610274600480360360408110156104305760008061042d611f03565b50505b81019060208101813564010000000081111561045457600080610451611f03565b50505b82018360208201111561046f5760008061046c611f03565b50505b8035906020019184602083028401116401000000008311171561049a57600080610497611f03565b50505b9193909290916020810190356401000000008111156104c1576000806104be611f03565b50505b8201836020820111156104dc576000806104d9611f03565b50505b8035906020019184602083028401116401000000008311171561050757600080610504611f03565b50505b50909250905061138d565b6101ea61152b565b6101ea611535565b6101ea61159a565b6101ea6115a4565b610274600480360360208110156105515760008061054e611f03565b50505b503573ffffffffffffffffffffffffffffffffffffffff166115ae565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600960205261060a6040822061059e611f6e565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600860205261060490670de0b6b3a7640000906105fe906105ef90604090206105e1611f6e565b6105e9611535565b90611762565b6105f888610fec565b906117e1565b90611864565b906118ed565b92915050565b60096020528060005260406000209050610628611f6e565b81565b610633611966565b73ffffffffffffffffffffffffffffffffffffffff1661065161135f565b73ffffffffffffffffffffffffffffffffffffffff16146106db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906106d8611f03565b50505b8060036001816106e9611f6e565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790610725611fc9565b50505050565b60006003610737611f6e565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001610763611f6e565b90505b90565b62093a8081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165a6107d4612017565b73ffffffffffffffffffffffffffffffffffffffff161461085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f416363657373207265737472696374656420746f206d6f74686572736869700060448201526064016040518091039061085b611f03565b50505b6108688282611971565b5050565b60006003610878611f6e565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff165a6108b4612017565b73ffffffffffffffffffffffffffffffffffffffff161461093e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4163636573732064656e6965640000000000000000000000000000000000000060448201526064016040518091039061093b611f03565b50505b6000610948611535565b806007610953611fc9565b50505061095e61132a565b806006610969611fc9565b50505073ffffffffffffffffffffffffffffffffffffffff811615610a00576109918161056e565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260096020526040902081906109c0611fc9565b50505060076109cd611f6e565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040902081906109fc611fc9565b5050505b6004610a0a611f6e565b5a610a1361205d565b10610a3857610a258262093a80611864565b806005610a30611fc9565b505050610a8c565b6000610a505a610a4661205d565b60046105e9611f6e565b90506000610a686005610a61611f6e565b83906117e1565b9050610a7b62093a806105fe86846118ed565b806005610a86611fc9565b50505050505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015610b2057600082820152602001610b09565b5050506040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016020604051808303818680610b826120a3565b158015610b9757600080610b94611f03565b50505b505a610ba16120ef565b5050505050158015610bc0573d6000803e3d6000610bbd611f03565b50505b505050506040513d6020811015610bdf57600080610bdc611f03565b50505b8101908080519350610bfa925083915062093a809050611864565b6005610c04611f6e565b1115610c79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f52657761726420697320746f6f20626967000000000000000000000000000000604482015260640160405180910390610c76611f03565b50505b5a610c8261205d565b806006610c8d611fc9565b505050610ca062093a805a61060461205d565b806004610cab611fc9565b5050507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d8360405190815260200160405180910390a1505050565b5a610cef612017565b610cf7611535565b806007610d02611fc9565b505050610d0d61132a565b806006610d18611fc9565b50505073ffffffffffffffffffffffffffffffffffffffff811615610daf57610d408161056e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526009602052604090208190610d6f611fc9565b5050506007610d7c611f6e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602052604090208190610dab611fc9565b5050505b6000600960005a610dbe612017565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610e00611f6e565b90508015610868576000600960005a610e17612017565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190610e5b611fc9565b5050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb5a610ea3612017565b836040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482015260440160206040518083038160008780610f0a6120a3565b158015610f1f57600080610f1c611f03565b50505b505a610f296121da565b505050505050158015610f49573d6000803e3d6000610f46611f03565b50505b505050506040513d6020811015610f6857600080610f65611f03565b50505b810190808051505050505a610f7b612017565b73ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04868260405190815260200160405180910390a25050565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812061060a611f6e565b611021611966565b73ffffffffffffffffffffffffffffffffffffffff1661103f61135f565b73ffffffffffffffffffffffffffffffffffffffff16146110c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906110c6611f03565b50505b600080806110d5611f6e565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600080600181611142611f6e565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179061117e611fc9565b505050565b61118b611966565b73ffffffffffffffffffffffffffffffffffffffff166111a961135f565b73ffffffffffffffffffffffffffffffffffffffff1614611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611230611f03565b50505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f43616e27742072657363756520676966740000000000000000000000000000006044820152606401604051809103906112f3611f03565b50505b6108685a611302612017565b73ffffffffffffffffffffffffffffffffffffffff84169083611a3c565b6005610628611f6e565b60006107635a61133861205d565b6004611342611f6e565b611ae8565b60086020528060005260406000209050610628611f6e565b6000808061136b611f6e565b906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165a6113cd612017565b73ffffffffffffffffffffffffffffffffffffffff1614611457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f416363657373207265737472696374656420746f206d6f746865727368697000604482015260640160405180910390611454611f03565b50505b8281146114cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f417272617973206c656e6774682073686f756c6420626520657175616c0000006044820152606401604051809103906114ca611f03565b50505b60005b838110156115245761151c8585838181106114e757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1684848481811061151057fe5b90506020020135611971565b6001016114d0565b5050505050565b6006610628611f6e565b600061153f610757565b61155457600761154d611f6e565b9050610766565b610763611590611562610757565b6105fe670de0b6b3a76400006105f8600561157b611f6e565b6105f86006611588611f6e565b6105e961132a565b6007610604611f6e565b6007610628611f6e565b6004610628611f6e565b6115b6611966565b73ffffffffffffffffffffffffffffffffffffffff166115d461135f565b73ffffffffffffffffffffffffffffffffffffffff161461165e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016040518091039061165b611f03565b50505b73ffffffffffffffffffffffffffffffffffffffff81166116d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806122a160269139604001915050604051809103906116d0611f03565b50505b8073ffffffffffffffffffffffffffffffffffffffff166000806116f5611f6e565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a38060006001816106e9611f6e565b6000828211156117db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401604051809103906117d8611f03565b50505b50900390565b6000826117f05750600061060a565b828202828482816117fd57fe5b041461185d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806122c7602191396040019150506040518091039061185a611f03565b50505b9392505050565b60008082116118dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401604051809103906118d9611f03565b50505b8183816118e557fe5b049392505050565b60008282018381101561185d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016040518091039061185a611f03565b60005a610763612017565b8161197a611535565b806007611985611fc9565b50505061199061132a565b80600661199b611fc9565b50505073ffffffffffffffffffffffffffffffffffffffff811615611a32576119c38161056e565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260096020526040902081906119f2611fc9565b50505060076119ff611f6e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602052604090208190611a2e611fc9565b5050505b6107258383611afe565b61117e837fa9059cbb00000000000000000000000000000000000000000000000000000000848460405173ffffffffffffffffffffffffffffffffffffffff90921660248301526044820152606401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169091179052611b8e565b6000818310611af7578161185d565b5090919050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260408120611b2b611f6e565b905081811461060a5773ffffffffffffffffffffffffffffffffffffffff8316600090815260026020528290604090208190611b65611fc9565b505050611b7a816105e9846001610604611f6e565b806001611b85611fc9565b50505092915050565b6060611be6826040516040808201905260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649082015273ffffffffffffffffffffffffffffffffffffffff86169190611c8a565b905060008151111561117e576020810181516020811015611c0f57600080611c0c611f03565b50505b810190808051925061117e915050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5361666545524332303a206f7065726174696f6e206661696c65640000000000604482015260640160405180910390611524611f03565b6060611c9584611e1d565b611d08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640160405180910390611d05611f03565b50505b600060608573ffffffffffffffffffffffffffffffffffffffff16856040518082805190602001908083835b60208310611d7157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611d34565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865a611dab6121da565b5050505050509150503d8060008114611dfe576040513d603f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681016040523d815291503d6000602084013e611e03565b606091505b5091509150611e13828286611e32565b9695505050505050565b60008082611e296120a3565b15159392505050565b60608315611e4157508161185d565b600083511115611e625782518084602001611e5a611f03565b50505061185d565b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ec6578082015183820152602001611eae565b50505050905090810190601f168015611ef35780820380516001836020036101000a031916815260200191505b50925050506040518091039061185a5b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015611f3b578086015182820160400152602001611f20565b506020828760640184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52505050565b6303daa959598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051935060005b604081101561117e57600082820152602001611fb2565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52600081526020611fb2565b6373509064598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020611fb2565b63bdbf8c36598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020611fb2565b638435035b598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020611fb2565b638540661f598160e01b8152612120565b808083111561060a575090919050565b808083101561060a575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015612158578088015182820152602001612140565b506060828960a40184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52815160408301513d6000853e8b8b82606087013350600060045af150596121ad8d3d612110565b8c016121b98187612100565b5b828110156121ce57600081526020016121ba565b50929c50505050505050565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b8981101561221e578089015182820152602001612206565b506060828a60a40184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52815160408301513d6000853e8c8c82606087013350600060045af150596122738e3d612110565b8d0161227f8187612100565b5b828110156122945760008152602001612280565b50929d5050505050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/modules/GovernanceRewards.sol:GovernanceRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3464,
        "contract": "contracts/modules/GovernanceRewards.sol:GovernanceRewards",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3468,
        "contract": "contracts/modules/GovernanceRewards.sol:GovernanceRewards",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3604,
        "contract": "contracts/modules/GovernanceRewards.sol:GovernanceRewards",
        "label": "rewardDistribution",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3608,
        "contract": "contracts/modules/GovernanceRewards.sol:GovernanceRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3610,
        "contract": "contracts/modules/GovernanceRewards.sol:GovernanceRewards",
        "label": "rewardRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3612,
        "contract": "contracts/modules/GovernanceRewards.sol:GovernanceRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3614,
        "contract": "contracts/modules/GovernanceRewards.sol:GovernanceRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3618,
        "contract": "contracts/modules/GovernanceRewards.sol:GovernanceRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3622,
        "contract": "contracts/modules/GovernanceRewards.sol:GovernanceRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}